linked list to binary search tree in O(n) time.

struct TNode* sortedListToBSTRecur(struct LNode **head_ref, int n)
{
    /* Base Case */
    if (n <= 0)
        return NULL;

    /* Recursively construct the left subtree */
    struct TNode *left = sortedListToBSTRecur(head_ref, n/2);

    /* Allocate memory for root, and link the above constructed left 
       subtree with root */
    struct TNode *root = newNode((*head_ref)->data);
    root->left = left;

    /* Change head pointer of Linked List for parent recursive calls */
    *head_ref = (*head_ref)->next;

    /* Recursively construct the right subtree and link it with root 
      The number of nodes in right subtree  is total nodes - nodes in 
      left subtree - 1 (for root) which is n-n/2-1*/
    root->right = sortedListToBSTRecur(head_ref, n-n/2-1);

    return root;
}

beautiful recursive code. here head_ref of linked list is incremented in recursive calls.


******************** 

finding numbers from 3 ll(a,b,c) such that sum is equal to given #.
O(n^2) can be achieved if we sort b in ascending and c in descending order.
calc sum using a + b + c
if( sum < # ) inc b
else		  inc a

*********************

copying dll with arbitrary and next pointer;
solve it by inserting node1 after node1 in orig dll and then changing pointers 
remove copied elements from orig dll and make orig dll independent

*********************
find intersection of two ll1 and ll2 in O(n)
find len1, len2
iterate (len1 - len2) if ll1 > ll2
now parallaly iterate both till common point is reached

*********************

merge sort on llist looks easy but involves good logic
take a ll, now 
merge_sort( **headRef ){
	head = *headRef;
	//use slow and fast pointers to get mid and last elements
	frontBackSplit( head, &a, &b ){
		here make two lls with their heads as a and b
		and their ends with NULL	
	}
	*headRef = SortedMerge( a, b ){
		node * result;
		if a == NULL return b;
		else if b ==  NULL return a;
		if( a-> data < b -> data ){
		// very imp point
			result = a;
		//very good use of recursion here
			result -> next = SortedMerge( a->next, b ) ;
		}else{
			result = b;
			result -> next = SortedMerge( a, b->next );
		}
	// pointer is returned as result
		return result;
	}
}

while using tortoise algo ( imp point during merge sort ) is to keep 
slow = head and fast = head -> next;
then use  while( slow && fast && fast -> next ){ ... }


***** LRU cache implementation *****
page which is referenced is brought to front 
so least referenced page will be at last of dll and we can remove it when needed

use dll as we can remove a node from middle and bring it to front easily

to detect a node we need hash table containing page# as key and address of node as value

********************* take care of *********************
head node, last node
tortoise and hare algo

***** time complexity of 
finding 8th element from beg = O(1) i.e. constant time
finding 8th element from end = O( n ) as we need to traverse list atlest once
